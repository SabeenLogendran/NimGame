import random 

# Explaining how to play the game and the rules
def explain_rules():
    print("Welcome to the Nim Game!")
    print("Here are the rules of this game:")
    print("1. This game starts with 5 piles of stones, each pile will contain different amounts of stone in them.")
    print("2. Both players will be given turns to pick up 1-3 stones from one out of the five piles.")
    print("3. The objective of this game is to force your opponent to pick up the last stone.")
    print("4. There are two different game modes, you can either play against a player or AI.")

# Choosing game mode
def game_mode():
    user_input = input("Do you wish to play against a player or AI?\nWhich mode do you wish to play?\n(Player/Ai):")
    user_input = user_input.strip().capitalize()
    
    if user_input == "Player":
        print("You chose player!")
        return "Player"
    elif user_input == "Ai":
        print("You chose ai!")
        return "Ai"
    else:
        print("Invalid Answer, Please try again")
        return game_mode()

# Getting player names if "Player vs Player"
def player_names():
    player1 = input("Player 1 name: ")
    player2 = input("Player 2 name: ")
    return player1, player2

# Set up the game with 5 piles
def setup_game():
    piles = [random.randint(5, 15) for _ in range(5)]  # 5 piles of stones will be added ranging from 5-15 stones per pile, in total only 5 piles
    return piles

def stone_piles(piles):
    print("\nCurrent piles of stones:")
    for i, pile in enumerate(piles):
        print(f"Pile {i + 1}: {'ðŸª¨ ' * pile}")  # Uses "ðŸª¨" to represent the amount of stones in each pile

def player_turn(player_name, piles):
    while True:
        stone_piles(piles)
        try:
            pile_choice = int(input(f"{player_name}, choose a pile (1-5): ")) - 1
            if pile_choice < 0 or pile_choice >= len(piles):
                print("Invalid pile. Please choose a pile from 1-5.")
                continue
            
            stones_to_remove = int(input(f"How many stones do you want to remove from pile {pile_choice + 1} (1-3): "))
            if stones_to_remove < 1 or stones_to_remove > 3:
                print("Invalid number of stones. You can only remove 1-3 stones each turn.")
                continue

            if stones_to_remove > piles[pile_choice]:
                print(f"Not enough stones in pile {pile_choice + 1}. Please choose a smaller number.")
                continue

            # Valid move, remove stones
            piles[pile_choice] -= stones_to_remove
            break
        except ValueError:
            print("Please enter a valid number.")

def ai_turn(piles):
    print("\nAi's turn:")
    while True:
        pile_choice = random.choice([i for i, pile in enumerate(piles) if pile > 0])
        stones_to_remove = random.randint(1, min(3, piles[pile_choice]))
        print(f"Ai chooses pile {pile_choice + 1} and removes {stones_to_remove} stones.")
        piles[pile_choice] -= stones_to_remove
        break

def winning_player(piles):
    total_stones = sum(piles)
    return total_stones == 1  # Ends the game when only one stone remains

def start_game(player1, player2, piles, mode):
    current_player = player1

    while True:
        if mode == "Player":  # Player vs Player
            player_turn(current_player, piles)
            if winning_player(piles):
                stone_piles(piles)
                print(f"{current_player} loses! The last stone remains in the pile.")
                break
            current_player = player2 if current_player == player1 else player1
        
        else:  # Player vs AI
            if current_player == player1:
                player_turn(current_player, piles)
                if winning_player(piles):
                    stone_piles(piles)
                    print(f"{player1} loses! The last stone was taken.")
                    break
                current_player = player2  # Switch to AI
            else:
                ai_turn(piles)
                if winning_player(piles):
                    stone_piles(piles)
                    print("AI loses! The last stone remains in the pile.")
                    break
                current_player = player1  # Switch back to player

# Getting the game started
explain_rules()
mode = game_mode()

if mode == "Player":  # Player vs Player
    player1, player2 = player_names()
else:
    player1 = input("Enter your name: ")
    player2 = "AI"

piles = setup_game()
print("Game is ready with 5 piles.")

# Start Game Loop
start_game(player1, player2, piles, mode)
